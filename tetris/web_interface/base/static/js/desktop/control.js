/**
 * Îç∞Ïä§ÌÅ¨ÌÉë Í¥ÄÏ†ú ÌôîÎ©¥ JavaScript
 * SSE Ïó∞Îèô Î∞è Ïã§Ï†ú API Ìò∏Ï∂ú Í∏∞Î∞ò Íµ¨ÌòÑ
 */

class ControlController {
    constructor() {
        this.currentStep = 0;
        this.isProcessing = false;
        this.hardwareConnected = false;
        this.sessionId = null;
        this.eventSource = null;
        
        // DOM ÏöîÏÜåÎì§
        this.mobileConnectionStatus = document.getElementById('mobileConnectionStatus');
        this.imageUploadStatus = document.getElementById('imageUploadStatus');
        this.executionTriggerStatus = document.getElementById('executionTriggerStatus');
        
        // ÌïòÎìúÏõ®Ïñ¥ ÏÉÅÌÉú ÏöîÏÜåÎì§
        this.cpuStatus = document.getElementById('cpuStatus');
        this.memoryStatus = document.getElementById('memoryStatus');
        this.sessionStatus = document.getElementById('sessionStatus');
        this.networkStatus = document.getElementById('networkStatus');
        this.port1Status = document.getElementById('port1Status');
        this.port2Status = document.getElementById('port2Status');
        this.port3Status = document.getElementById('port3Status');
        this.port4Status = document.getElementById('port4Status');
        
        this.init();
    }

    async init() {
        this.bindEvents();
        this.setupSSE();
        await this.initializeSession();
        await this.loadInitialStatus();
        this.loadQRCode();
        
        console.log('üöÄ Îç∞Ïä§ÌÅ¨ÌÉë Í¥ÄÏ†ú ÌôîÎ©¥ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    }
    
    // Ï¥àÍ∏∞ ÏÉÅÌÉú Î°úÎìú
    async loadInitialStatus() {
        try {
            const statusUrl = window.CONFIG?.ENDPOINTS?.DESKTOP?.STATUS || '/desktop/api/status';
            const response = await fetch(statusUrl);
            const result = await response.json();
            
            if (result.success && result.data) {
                console.log('üìä Ï¥àÍ∏∞ ÏÉÅÌÉú Î°úÎìú:', result.data);
                this.updateSystemStatus(result.data);
            }
        } catch (error) {
            console.error('Ï¥àÍ∏∞ ÏÉÅÌÉú Î°úÎìú Ïò§Î•ò:', error);
            // Ïò§Î•ò Ïãú Í∏∞Î≥∏ ÏÉÅÌÉúÎ°ú Ï¥àÍ∏∞Ìôî
            this.resetUI();
        }
    }
    
    bindEvents() {
        // ÏãúÏä§ÌÖú Ï†úÏñ¥ Î≤ÑÌäº Ïù¥Î≤§Ìä∏ (Ï†ÑÏó≠ Ìï®ÏàòÎ°ú Ìò∏Ï∂úÎê®)
        window.refreshStatus = () => this.refreshSystemStatus();
        window.resetSystem = () => this.resetSystem();
        
        // ÏïÑÏΩîÎîîÏñ∏ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä
        this.setupAccordionEvents();
        
        // ÌåùÏóÖ Î™®Îã¨ Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä
        this.setupModalEvents();
        
        // QR ÏΩîÎìú Î™®Îã¨ Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä
        this.setupQRModalEvents();
        
        // QR ÏΩîÎìú ÏÉàÎ°úÍ≥†Ïπ® (5Î∂ÑÎßàÎã§)
        setInterval(() => {
            this.refreshQRCode();
        }, 300000);
    }
    
    
    // ÏïÑÏΩîÎîîÏñ∏ Ïù¥Î≤§Ìä∏ ÏÑ§Ï†ï
    setupAccordionEvents() {
        const accordionButtons = document.querySelectorAll('.btn-accordion');
        accordionButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                // e.preventDefault();
                e.stopPropagation();
                if (button.querySelector('.accordion-step-status.completed')) {
                    // Î∂ÑÏÑù ÏôÑÎ£åÎêú Í≤ΩÏö∞ÏóêÎßå ÏïÑÏΩîÎîîÏñ∏ ÌÜ†Í∏Ä
                    this.toggleAccordion(button);
                }
            }, { capture: true }); // Ï∫°Ï≤ò Îã®Í≥ÑÏóêÏÑú Î®ºÏ†Ä Ïã§Ìñâ
        });
        
        // MutationObserverÎ°ú ÏïÑÏΩîÎîîÏñ∏ ÏÉÅÌÉú Î≥ÄÌôî Í∞êÏßÄ Î∞è Ïä§ÌÅ¨Î°§
        this.setupAccordionScrollObserver();
    }
    
    // ÏïÑÏΩîÎîîÏñ∏ Ïä§ÌÅ¨Î°§ ÏòµÏ†ÄÎ≤Ñ ÏÑ§Ï†ï (active ÌÅ¥ÎûòÏä§Îäî toggleAccordionÏóêÏÑú Í¥ÄÎ¶¨)
    setupAccordionScrollObserver() {
        const accordionCollapses = document.querySelectorAll('.accordion-collapse');
        
        accordionCollapses.forEach(collapse => {
            let scrollTimeout = null;
            let lastExpandedState = false;
            
            const observer = new MutationObserver((mutations) => {
                // ÏïÑÏΩîÎîîÏñ∏ Î≤ÑÌäºÍ≥º ÏïÑÏù¥ÌÖú Ï∞æÍ∏∞
                const button = document.querySelector(`[aria-controls="${collapse.id}"]`);
                const accordionItem = collapse.closest('.accordion-item');
                
                // Î≤ÑÌäºÏùò aria-expanded ÏÜçÏÑ±ÏúºÎ°ú Ïó¥Î¶º/Îã´Ìûò ÏÉÅÌÉú ÌôïÏù∏
                const isExpanded = button && button.getAttribute('aria-expanded') === 'true';
                
                // ÏÉÅÌÉúÍ∞Ä Îã´Ìûò -> Ïó¥Î¶ºÏúºÎ°ú Î≥ÄÍ≤ΩÎêòÏóàÏùÑ ÎïåÎßå Ïä§ÌÅ¨Î°§
                if (isExpanded && !lastExpandedState) {
                    // Ïù¥Ï†Ñ ÌÉÄÏûÑÏïÑÏõÉ Ï∑®ÏÜå
                    if (scrollTimeout) {
                        clearTimeout(scrollTimeout);
                    }
                    
                    // ÏÉàÎ°úÏö¥ Ïä§ÌÅ¨Î°§ ÏòàÏïΩ
                    scrollTimeout = setTimeout(() => {
                        const accordionBody = collapse.querySelector('.accordion-body');
                        if (accordionBody && collapse.classList.contains('show')) {
                            // ÏïÑÏΩîÎîîÏñ∏ Ìó§ÎçîÎ•º Í∏∞Ï§ÄÏúºÎ°ú Ïä§ÌÅ¨Î°§ (Î≥∏Î¨∏Î≥¥Îã§ Ìó§ÎçîÎ°ú Ïä§ÌÅ¨Î°§ÌïòÎ©¥ Îçî ÏúÑÎ°ú Ïò¨ÎùºÍ∞ê)
                            const targetElement = accordionItem || accordionBody;
                            
                            targetElement.scrollIntoView({
                                behavior: 'smooth',
                                block: 'start',
                                inline: 'nearest'
                            });
                            
                            // Ï∂îÍ∞ÄÎ°ú ÏïΩÍ∞Ñ ÏúÑÎ°ú Ïä§ÌÅ¨Î°§ (Ìó§Îçî Ïó¨Ïú† Í≥µÍ∞Ñ)
                            setTimeout(() => {
                                window.scrollBy({
                                    top: -20,
                                    behavior: 'smooth'
                                });
                            }, 300);
                        }
                        scrollTimeout = null;
                    }, 200); // Ïï†ÎãàÎ©îÏù¥ÏÖòÏù¥ ÎÅùÎÇú ÌõÑ Ïä§ÌÅ¨Î°§
                }
                
                lastExpandedState = isExpanded;
            });
            
            // collapseÏùò ÌÅ¥ÎûòÏä§ÏôÄ Ïä§ÌÉÄÏùº ÏÜçÏÑ± Î≥ÄÌôî Í∞êÏßÄ
            observer.observe(collapse, {
                attributes: true,
                attributeFilter: ['class', 'style', 'aria-hidden']
            });
            
            // Î≤ÑÌäºÏùò aria-expanded ÏÜçÏÑ±ÎèÑ Í∞êÏãú
            const button = document.querySelector(`[aria-controls="${collapse.id}"]`);
            if (button) {
                const buttonObserver = new MutationObserver((mutations) => {
                    observer.takeRecords(); // collapse observer Ìä∏Î¶¨Í±∞
                });
                
                buttonObserver.observe(button, {
                    attributes: true,
                    attributeFilter: ['aria-expanded']
                });
            }
        });
    }
    
    setupModalEvents() {
        // ÏÑ∏Î∂Ä Ï†ïÎ≥¥ Î≥¥Í∏∞ Î≤ÑÌäº Ïù¥Î≤§Ìä∏
        const showDetailsBtn = document.getElementById('showDetailsBtn');
        const closeModalBtn = document.getElementById('closeModalBtn');
        const modal = document.getElementById('detailsModal');
        
        if (showDetailsBtn) {
            showDetailsBtn.addEventListener('click', () => {
                this.openModal();
            });
        }
        
        if (closeModalBtn) {
            closeModalBtn.addEventListener('click', () => {
                this.closeModal();
            });
        }
        
        // Î™®Îã¨ Î∞∞Í≤Ω ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
        if (modal) {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.closeModal();
                }
            });
        }
        
        // ESC ÌÇ§Î°ú Î™®Îã¨ Îã´Í∏∞
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && modal && modal.style.display !== 'none') {
                this.closeModal();
            }
        });
    }
    
    setupQRModalEvents() {
        // QR ÏΩîÎìú Ïª®ÌÖåÏù¥ÎÑà ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
        const qrContainer = document.getElementById('qrCodeContainer');
        const qrModal = document.getElementById('qrModal');
        const closeQrModalBtn = document.getElementById('closeQrModalBtn');
        const qrModalImage = document.getElementById('qrModalImage');
        
        if (qrContainer) {
            qrContainer.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.openQRModal();
            });
        } else {
            console.error('‚ùå QR ÏΩîÎìú Ïª®ÌÖåÏù¥ÎÑàÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
        }
        
        if (closeQrModalBtn) {
            closeQrModalBtn.addEventListener('click', () => {
                this.closeQRModal();
            });
        }
        
        // QR Î™®Îã¨ Î∞∞Í≤Ω ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
        if (qrModal) {
            qrModal.addEventListener('click', (e) => {
                if (e.target === qrModal) {
                    this.closeQRModal();
                }
            });
        }
        
        // ESC ÌÇ§Î°ú QR Î™®Îã¨ Îã´Í∏∞
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                const qrModal = document.getElementById('qrModal');
                if (qrModal && qrModal.classList.contains('show')) {
                    this.closeQRModal();
                }
            }
        });
    }
    
    openModal() {
        const modal = document.getElementById('detailsModal');
        if (modal) {
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden'; // Î∞∞Í≤Ω Ïä§ÌÅ¨Î°§ Î∞©ÏßÄ
            console.log('üìã ÏÑ∏Î∂Ä Ï†ïÎ≥¥ ÌåùÏóÖ Ïó¥Î¶º');
        }
    }
    
    closeModal() {
        const modal = document.getElementById('detailsModal');
        if (modal) {
            // Î™®Îì† Ïä§ÌÅ¨Î°§ Î≥µÏõê
            document.querySelectorAll(".analysis-result-json-container, .analysis-result-container").forEach((item) => {
                item.scrollTop = 0;
                item.scrollLeft = 0;
            });

            // Î™®Îì† Ïó¥Î†§ÏûàÎäî ÏïÑÏΩîÎîîÏñ∏ Îã´Í∏∞
            document.querySelectorAll('.accordion-item.active').forEach(item => {
                item.classList.remove('active');
            });

            document.querySelectorAll('.accordion-collapse.show').forEach(collapse => {
                collapse.classList.remove('show');
                collapse.setAttribute('aria-hidden', 'true');
                collapse.style.display = '';
                collapse.style.height = '';
                
                // Í¥ÄÎ†® Î≤ÑÌäºÏùò aria-expanded ÏóÖÎç∞Ïù¥Ìä∏ Î∞è active Ï†úÍ±∞
                const relatedButton = document.querySelector(`[aria-controls="${collapse.id}"]`);
                if (relatedButton) {
                    relatedButton.setAttribute('aria-expanded', 'false');
                    
                    // ÌôîÏÇ¥Ìëú ÌöåÏ†Ñ Ï¥àÍ∏∞Ìôî
                    const arrow = relatedButton.querySelector('.accordion-arrow');
                    if (arrow) {
                        arrow.style.transform = 'rotate(0deg)';
                    }
                }
                
                // accordion-itemÏùò active ÌÅ¥ÎûòÏä§ Ï†úÍ±∞
                const accordionItem = collapse.closest('.accordion-item');
                if (accordionItem) {
                    accordionItem.classList.remove('active');
                }
            });
            
            modal.style.display = 'none';
        }
    }
    
    openQRModal() {
        const qrModal = document.getElementById('qrModal');
        const qrModalImage = document.getElementById('qrModalImage');
        const qrCodeImage = document.getElementById('qrCodeImage');
        
        if (qrModal && qrModalImage && qrCodeImage) {
            // Î™®Îã¨ Ïù¥ÎØ∏ÏßÄÏóê ÏõêÎ≥∏ QR ÏΩîÎìú Ïù¥ÎØ∏ÏßÄ ÏÜåÏä§ ÏÑ§Ï†ï
            qrModalImage.src = qrCodeImage.src;
            qrModal.classList.add('show');
            document.body.style.overflow = 'hidden'; // Î∞∞Í≤Ω Ïä§ÌÅ¨Î°§ Î∞©ÏßÄ
        } else {
            console.error('‚ùå QR Î™®Îã¨ ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:', {
                qrModal: !!qrModal,
                qrModalImage: !!qrModalImage,
                qrCodeImage: !!qrCodeImage
            });
        }
    }
    
    closeQRModal() {
        const qrModal = document.getElementById('qrModal');
        
        if (qrModal) {
            qrModal.classList.remove('show');
            document.body.style.overflow = ''; // Ïä§ÌÅ¨Î°§ Î≥µÏõê
        } else {
            console.error('‚ùå QR Î™®Îã¨ ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
        }
    }
    
    // Îã®Í≥ÑÎ≥Ñ Î∂ÑÏÑù Í≤∞Í≥º Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
    checkStepHasResult(statusData, step) {
        if (!statusData.analysis_result) return false;
        
        const stepResults = {
            1: statusData.analysis_result.chain1_out,
            2: statusData.analysis_result.chain2_out,
            3: statusData.analysis_result.chain3_out,
            4: statusData.analysis_result.chain4_out
        };
        
        return !!(stepResults[step] && stepResults[step].trim());
    }
    
    // Îã®Í≥ÑÎ≥Ñ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Î≥µÏõê
    restoreStepDetailInfo(detailInfo, step) {
        const stepDescriptions = {
            1: 'ÏóÖÎ°úÎìúÎêú Ïù¥ÎØ∏ÏßÄÏóêÏÑú Ï¢åÏÑùÍ≥º ÏäπÍ∞ù Ïù∏Ïãù',
            2: 'Ïù∏ÏãùÎêú Îç∞Ïù¥ÌÑ∞Î•º Íµ¨Ï°∞ÌôîÌïòÍ≥† Î∂ÑÏÑù',
            3: 'AI ÏïåÍ≥†Î¶¨Ï¶òÏúºÎ°ú ÏµúÏ†Å Ï¢åÏÑù Î∞∞Ïπò ÏÉùÏÑ±'
        };
        
        const stepLabels = {
            1: 'ÏÇ¨Ïö©Ïûê ÏûÖÎ†• Î∂ÑÏÑù ÏßÑÌñâÎ•†',
            2: 'ÏµúÏ†Å Î∞∞Ïπò ÏÉùÏÑ± ÏßÑÌñâÎ•†',
            3: 'ÏãúÌä∏ ÎèôÏûë Í≥ÑÌöç ÏßÑÌñâÎ•†'
        };
        
        const description = stepDescriptions[step] || 'Î∂ÑÏÑù ÏßÑÌñâ Ï§ë';
        const label = stepLabels[step] || 'ÏßÑÌñâÎ•†';
        
        detailInfo.innerHTML = `
            <p class="krds-text">${description}</p>
            <div class="step-progress-section">
                <div class="krds-progress" role="progressbar" aria-label="${label}" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" aria-valuetext="${label}: 100%">
                    <div class="krds-progress__bar" id="step${step}Progress" style="width: 100%"></div>
                </div>
                <span class="krds-text krds-text--small" id="step${step}ProgressText">100%</span>
            </div>
        `;
    }
    
    // ÏïÑÏΩîÎîîÏñ∏ ÌÜ†Í∏Ä Í∏∞Îä•
    toggleAccordion(button) {
        const targetId = button.getAttribute('aria-controls');
        const targetCollapse = document.getElementById(targetId);
        const accordionItem = targetCollapse?.closest('.accordion-item');
        
        // ÌòÑÏû¨ ÏÉÅÌÉú ÌôïÏù∏ (show ÌÅ¥ÎûòÏä§ Í∏∞Ï§ÄÏúºÎ°ú ÌåêÎã®)
        const isCurrentlyExpanded = targetCollapse && targetCollapse.classList.contains('show');
        console.log('üîç ÏïÑÏΩîÎîîÏñ∏ ÏÉÅÌÉú ÌôïÏù∏:', {
            targetId,
            isCurrentlyExpanded,
            ariaExpanded: button.getAttribute('aria-expanded'),
            hasShowClass: targetCollapse?.classList.contains('show')
        });
        
        if (targetCollapse) {
            // Îã§Î•∏ ÏïÑÏΩîÎîîÏñ∏Îì§ Îã´Í∏∞
            document.querySelectorAll('.accordion-collapse.show').forEach(collapse => {
                if (collapse.id !== targetId) {
                    collapse.classList.remove('show');
                    collapse.setAttribute('aria-hidden', 'true');
                    // KRDS/Í∏∞ÌÉÄ Ïä§ÌÅ¨Î¶ΩÌä∏Í∞Ä ÎÇ®Í∏¥ Ïù∏ÎùºÏù∏ Ïä§ÌÉÄÏùº Ï¥àÍ∏∞Ìôî
                    collapse.style.display = '';
                    collapse.style.height = '';
                    const relatedButton = document.querySelector(`[aria-controls="${collapse.id}"]`);
                    if (relatedButton) {
                        relatedButton.setAttribute('aria-expanded', 'false');
                        relatedButton.classList.remove('active');
                        // ÌôîÏÇ¥Ìëú ÌöåÏ†Ñ Ï¥àÍ∏∞Ìôî
                        const arrow = relatedButton.querySelector('.accordion-arrow');
                        if (arrow) {
                            arrow.style.transform = 'rotate(0deg)';
                        }
                    }
                    // accordion-itemÏùò active ÌÅ¥ÎûòÏä§ÎèÑ Ï†úÍ±∞
                    const otherAccordionItem = collapse.closest('.accordion-item');
                    if (otherAccordionItem) {
                        otherAccordionItem.classList.remove('active');
                    }
                }
            });
            
            // ÌòÑÏû¨ ÏïÑÏΩîÎîîÏñ∏ ÌÜ†Í∏Ä
            if (isCurrentlyExpanded) {
                // Îã´Í∏∞
                targetCollapse.classList.remove('show');
                targetCollapse.setAttribute('aria-hidden', 'true');
                targetCollapse.style.display = '';
                targetCollapse.style.height = '';
                button.setAttribute('aria-expanded', 'false');
                
                // active ÌÅ¥ÎûòÏä§ Ï†úÍ±∞
                button.classList.remove('active');
                if (accordionItem) {
                    accordionItem.classList.remove('active');
                }
                
                console.log('üìÅ ÏïÑÏΩîÎîîÏñ∏ Îã´Í∏∞:', targetId);
                
                // ÌôîÏÇ¥Ìëú ÌöåÏ†Ñ Ï¥àÍ∏∞Ìôî
                const arrow = button.querySelector('.accordion-arrow');
                if (arrow) {
                    arrow.style.transform = 'rotate(0deg)';
                }
            } else {
                // Ïó¥Í∏∞
                targetCollapse.classList.add('show');
                targetCollapse.setAttribute('aria-hidden', 'false');
                targetCollapse.style.display = 'block';
                targetCollapse.style.height = 'auto';
                targetCollapse.style.maxHeight = '500px';
                targetCollapse.style.overflow = 'visible';
                button.setAttribute('aria-expanded', 'true');
                
                // active ÌÅ¥ÎûòÏä§ Ï∂îÍ∞Ä
                button.classList.add('active');
                if (accordionItem) {
                    accordionItem.classList.add('active');
                }
                
                console.log('üìÇ ÏïÑÏΩîÎîîÏñ∏ Ïó¥Í∏∞:', targetId);
                
                // ÏïÑÏΩîÎîîÏñ∏ ÎÇ¥Ïö© Í∞ÄÏãúÏÑ± ÌôïÏù∏ Î∞è Í∞ïÏ†ú ÏÑ§Ï†ï
                const accordionBody = targetCollapse.querySelector('.accordion-body');
                if (accordionBody) {
                    accordionBody.style.display = 'block';
                    accordionBody.style.visibility = 'visible';
                    accordionBody.style.opacity = '1';
                }
                
                // ÌôîÏÇ¥Ìëú ÌöåÏ†Ñ
                const arrow = button.querySelector('.accordion-arrow');
                if (arrow) {
                    arrow.style.transform = 'rotate(180deg)';
                }
                
                // Ïä§ÌÅ¨Î°§ÏùÄ MutationObserverÏóêÏÑú ÏûêÎèô Ï≤òÎ¶¨Îê®
            }
        }
    }
    
    // ÏÑ∏ÏÖò Ï¥àÍ∏∞Ìôî
    async initializeSession() {
        try {
            this.sessionId = this.generateSessionId();
            console.log(`üì± ÏÑ∏ÏÖò Ï¥àÍ∏∞Ìôî: ${this.sessionId}`);
            
            const joinSessionUrl = window.CONFIG?.ENDPOINTS?.DESKTOP?.JOIN_SESSION || '/desktop/api/join_session';
            const response = await fetch(joinSessionUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    session_id: this.sessionId,
                    type: 'desktop'
                })
            });
            
            // ÏùëÎãµ ÏÉÅÌÉú ÌôïÏù∏
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ ÏÑ∏ÏÖò Îì±Î°ù ÏôÑÎ£å');
                this.updateSessionStatus('connected');
            } else {
                console.error('‚ùå ÏÑ∏ÏÖò Îì±Î°ù Ïã§Ìå®:', result.error);
            }
        } catch (error) {
            console.error('ÏÑ∏ÏÖò Ï¥àÍ∏∞Ìôî Ïò§Î•ò:', error);
        }
    }
    
    // SSE Ïó∞Í≤∞ ÏÑ§Ï†ï
    setupSSE() {
        if (this.eventSource) {
            this.eventSource.close();
        }
        
        // Îç∞Ïä§ÌÅ¨ÌÉëÏö© SSE ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÇ¨Ïö©
        const statusStreamUrl = window.CONFIG?.ENDPOINTS?.DESKTOP?.STATUS_STREAM || '/api/status_stream';
        this.eventSource = new EventSource(statusStreamUrl);
        
        this.eventSource.onmessage = async (event) => {
            try {
                // Îπà Î©îÏãúÏßÄÎÇò Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Îç∞Ïù¥ÌÑ∞ Ï≤¥ÌÅ¨
                if (!event.data || event.data.trim() === '') {
                    console.log('üì° SSE Îπà Î©îÏãúÏßÄ ÏàòÏã†, Î¨¥Ïãú');
                    return;
                }
                
                const data = JSON.parse(event.data);
                console.log('üì° SSE Î©îÏãúÏßÄ ÏàòÏã†:', data);
                console.log('üì° SSE Î©îÏãúÏßÄ ÌÉÄÏûÖ:', typeof data, 'keys:', Object.keys(data));
                
                // Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ Í∞ïÌôî
                await this.handleSSEMessage(data);
                
                // UI Ï¶âÏãú ÏóÖÎç∞Ïù¥Ìä∏ ÌôïÏù∏
                console.log('üì° SSE Î©îÏãúÏßÄ Ï≤òÎ¶¨ ÏôÑÎ£å');
            } catch (error) {
                console.error('SSE Î©îÏãúÏßÄ ÌååÏã± Ïò§Î•ò:', error, 'Îç∞Ïù¥ÌÑ∞:', event.data);
            }
        };
        
        this.eventSource.onerror = (error) => {
            console.error('SSE Ïó∞Í≤∞ Ïò§Î•ò:', error);
            console.log('SSE Ïò§Î•ò ÎòêÎäî Ï¢ÖÎ£å:', error);
            console.log('SSE Ïó∞Í≤∞ ÏÉÅÌÉú:', this.eventSource.readyState);
            
            // Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏
            if (this.eventSource.readyState === EventSource.CLOSED) {
                console.log('SSE Ïó∞Í≤∞Ïù¥ Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§. Ïû¨Ïó∞Í≤∞ÏùÑ ÏãúÎèÑÌï©ÎãàÎã§...');
                // Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ Ï†ÑÏóê Í∏∞Ï°¥ Ïó∞Í≤∞ Ï†ïÎ¶¨
                try {
                    this.eventSource.close();
                } catch (closeError) {
                    console.warn('SSE Ïó∞Í≤∞ Ï¢ÖÎ£å Ï§ë Ïò§Î•ò:', closeError);
                }
                setTimeout(() => {
                    console.log('üîÑ SSE Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ...');
                    // Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ ÏãúÏóêÎèÑ CONFIG ÎØ∏Ï¥àÍ∏∞Ìôî ÎåÄÎπÑ
                    this.setupSSE();
                }, 3000);
            } else if (this.eventSource.readyState === EventSource.CONNECTING) {
                console.log('SSE Ïó∞Í≤∞ Ï§ë...');
            } else if (this.eventSource.readyState === EventSource.OPEN) {
                console.log('SSE Ïó∞Í≤∞Ïù¥ Ïó¥Î†§ÏûàÏäµÎãàÎã§.');
            }
        };
        
        console.log('‚úÖ SSE Ïó∞Í≤∞ ÏÑ§Ï†ï ÏôÑÎ£å');
    }
    
    // SSE Î©îÏãúÏßÄ Ï≤òÎ¶¨
    async handleSSEMessage(data) {
        if (data.event === 'connected') {
            console.log('‚úÖ SSE Ïó∞Í≤∞ ÌôïÏù∏');
            return;
        }
        
        console.log('üì° SSE Î©îÏãúÏßÄ Ï≤òÎ¶¨ ÏãúÏûë:', data);
        
        // AI Ï≤òÎ¶¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ - Î™®Îì† Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
        if (data.current_step !== undefined || data.progress !== undefined || data.status) {
            console.log('üéØ AI ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏ Ìä∏Î¶¨Í±∞:', {
                current_step: data.current_step,
                progress: data.progress,
                status: data.status
            });
            await this.updateAIProgress(data);
            
            // Î∂ÑÏÑù ÏãúÏûë Ïãú Ï≤´ Î≤àÏß∏ Îã®Í≥Ñ ÌëúÏãú
            if (data.current_step === 0 && data.status === 'running') {
                console.log('üéØ 1Îã®Í≥Ñ Î∂ÑÏÑù ÏãúÏûë - ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏');
                if (window.updateAIProgress) {
                    window.updateAIProgress(1, 25, 'running', 'ÏÇ¨Ïö©Ïûê ÏûÖÎ†• Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§...');
                }
                if (window.updateAccordionStatus) {
                    window.updateAccordionStatus(1, 'active');
                }
            }
        }
        
        // Î∂ÑÏÑù Í≤∞Í≥ºÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ Ï¶âÏãú ÌëúÏãú
        if (data.analysis_result || data.chain1_out || data.chain2_out || data.chain3_out || data.chain4_out) {
            console.log('üéØ Î∂ÑÏÑù Í≤∞Í≥º ÏóÖÎç∞Ïù¥Ìä∏ Ìä∏Î¶¨Í±∞:', data);
            if (window.handleAIStatusData) {
                await window.handleAIStatusData(data);
            }
        }
        
        // ÌïòÎìúÏõ®Ïñ¥ Ï†úÏñ¥ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        if (data.event && data.event.startsWith('hardware_')) {
            this.updateHardwareStatus(data);
        }
        
        // ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (Î™®Îì† SSE Î©îÏãúÏßÄÏóê ÎåÄÌï¥)
        this.updateSystemStatus(data);
        
        console.log('üì° SSE Î©îÏãúÏßÄ Ï≤òÎ¶¨ ÏôÑÎ£å');
    }
    
    // AI ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏
    async updateAIProgress(data) {
        console.log('üéØ updateAIProgress Ìò∏Ï∂úÎê®:', data);
        
        const step = data.current_step || data.processing?.current_step;
        const progress = data.progress || data.processing?.progress;
        const message = data.message || data.processing?.message;
        const status = data.status || data.system?.status || 'running';
        
        console.log('üéØ Ï∂îÏ∂úÎêú Í∞íÎì§:', { step, progress, message, status });
        
        if (step !== undefined && step !== null) {
            console.log('üéØ Îã®Í≥Ñ ÏóÖÎç∞Ïù¥Ìä∏:', step);
            this.currentStep = step;
            
            // AI ÏßÑÌñâÎ•† ÌëúÏãú Ìï®Ïàò Ìò∏Ï∂ú (control-ai.jsÏùò Ìï®Ïàò)
            if (window.updateAIProgress) {
                console.log('üéØ window.updateAIProgress Ìò∏Ï∂ú');
                window.updateAIProgress(step, progress || 0, status, message);
            }
            if (window.updateStepIndicator) {
                console.log('üéØ window.updateStepIndicator Ìò∏Ï∂ú');
                window.updateStepIndicator(step);
            }
        }
        
        // ÏßÑÌñâÎ•†Îßå ÏûàÎäî Í≤ΩÏö∞ÏóêÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
        if (progress !== undefined && progress !== null) {
            console.log('üéØ ÏßÑÌñâÎ•†Îßå ÏóÖÎç∞Ïù¥Ìä∏:', progress);
            if (window.updateAIProgress && this.currentStep) {
                window.updateAIProgress(this.currentStep, progress, status, message);
            }
        }
        
        // Îã®Í≥ÑÎ≥Ñ Í≤∞Í≥º Ï≤òÎ¶¨
        if (window.handleAIStatusData) {
            console.log('üéØ window.handleAIStatusData Ìò∏Ï∂ú');
            await window.handleAIStatusData(data);
        }
        
        console.log('üéØ updateAIProgress ÏôÑÎ£å');
    }
    
    // ÌïòÎìúÏõ®Ïñ¥ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    updateHardwareStatus(data) {
        console.log('üîß ÌïòÎìúÏõ®Ïñ¥ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏:', data);
        
        switch (data.event) {
            case 'hardware_start':
                this.updateHardwareConnectionStatus('connecting');
                break;
            case 'hardware_progress':
                this.updateHardwareConnectionStatus('connected');
                break;
            case 'hardware_complete':
                this.updateHardwareConnectionStatus('connected');
                this.hardwareConnected = true;
                break;
            case 'hardware_error':
                this.updateHardwareConnectionStatus('error');
                break;
        }
    }
    
    
    // ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    updateSystemStatus(data = {}) {
        try {
            // Î™®Î∞îÏùº Ïó∞Í≤∞ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ - SSE Î©îÏãúÏßÄÏóêÏÑú Î™®Î∞îÏùº ÏÑ∏ÏÖò Í∞êÏßÄ
            if (this.mobileConnectionStatus) {
                // Î™®Î∞îÏùºÏóêÏÑú Î∂ÑÏÑùÏù¥ ÏãúÏûëÎêòÏóàÍ±∞ÎÇò ÏßÑÌñâ Ï§ëÏù∏ Í≤ΩÏö∞ "Ï†ëÏÜçÏ§ë"ÏúºÎ°ú ÌëúÏãú
                if (data.current_step !== undefined || data.progress !== undefined || data.status === 'running' || data.upload?.uploaded_file) {
                    this.updateStatusBadge(this.mobileConnectionStatus, 'connected', 'Ï†ëÏÜçÏ§ë');
                } else if (data.system?.status === 'idle' || data.status === 'idle') {
                    this.updateStatusBadge(this.mobileConnectionStatus, 'disconnected', 'ÎåÄÍ∏∞Ï§ë');
                }
            }
            
            // Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            if (this.imageUploadStatus) {
                // upload Í∞ùÏ≤¥ÏóêÏÑú uploaded_file ÌôïÏù∏ (Ïö∞ÏÑ†ÏàúÏúÑ ÎÜíÏùå)
                const uploadedFile = data.upload?.uploaded_file;
                // ÏµúÏÉÅÏúÑ Î†àÎ≤®Ïùò image_uploaded ÎòêÎäî uploaded_fileÎèÑ ÌôïÏù∏ (Ìè¥Î∞±)
                const topLevelUploaded = data.image_uploaded ?? data.uploaded_file;
                
                // Ïã§Ï†ú ÏóÖÎ°úÎìú ÏÉÅÌÉú Í≤∞Ï†ï
                const isUploaded = uploadedFile ?? topLevelUploaded;
                
                console.log('üì∏ Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏÉÅÌÉú Ï≤¥ÌÅ¨:', {
                    'data.upload?.uploaded_file': uploadedFile,
                    'data.image_uploaded': data.image_uploaded,
                    'data.uploaded_file': data.uploaded_file,
                    'isUploaded': isUploaded
                });
                
                if (isUploaded === true) {
                    console.log('üì∏ Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏÉÅÌÉú Í∞êÏßÄ - ÏóÖÎ°úÎìúÎê®');
                    this.updateStatusBadge(this.imageUploadStatus, 'uploaded', 'ÏóÖÎ°úÎìúÎê®');
                } else {
                    console.log('üì∏ Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏÉÅÌÉú Í∞êÏßÄ - ÎåÄÍ∏∞Ï§ë');
                    this.updateStatusBadge(this.imageUploadStatus, 'waiting', 'ÎåÄÍ∏∞Ï§ë');
                }
            }
            
            // Ïã§Ìñâ Ìä∏Î¶¨Í±∞ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (Í∞úÏÑ†)
            if (this.executionTriggerStatus) {
                const processingStatus = data.processing?.status || data.status || data.system?.status;
                console.log('üîÑ Ïã§Ìñâ Ìä∏Î¶¨Í±∞ ÏÉÅÌÉú ÌôïÏù∏:', processingStatus);
                
                if (processingStatus === 'running' || processingStatus === 'processing') {
                    console.log('üîÑ Ïã§Ìñâ Ìä∏Î¶¨Í±∞ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏: Ïã§ÌñâÏ§ë');
                    this.updateStatusBadge(this.executionTriggerStatus, 'active', 'Ïã§ÌñâÏ§ë');
                    this.isProcessing = true;
                } else if (processingStatus === 'completed' || processingStatus === 'done') {
                    console.log('üîÑ Ïã§Ìñâ Ìä∏Î¶¨Í±∞ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏: ÏôÑÎ£å');
                    this.updateStatusBadge(this.executionTriggerStatus, 'completed', 'ÏôÑÎ£å');
                    this.isProcessing = false;
                } else if (processingStatus === 'idle' || processingStatus === 'waiting') {
                    console.log('üîÑ Ïã§Ìñâ Ìä∏Î¶¨Í±∞ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏: ÎåÄÍ∏∞Ï§ë');
                    this.updateStatusBadge(this.executionTriggerStatus, 'waiting', 'ÎåÄÍ∏∞Ï§ë');
                    this.isProcessing = false;
                } else if (processingStatus === 'error' || processingStatus === 'cancelled') {
                    console.log('üîÑ Ïã§Ìñâ Ìä∏Î¶¨Í±∞ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏: Ïò§Î•ò');
                    this.updateStatusBadge(this.executionTriggerStatus, 'error', 'Ïò§Î•ò');
                    this.isProcessing = false;
                }
            }
            
            // ÌïòÎìúÏõ®Ïñ¥ Ïó∞Í≤∞ ÏÉÅÌÉú ÏãúÎÆ¨Î†àÏù¥ÏÖò
            this.updateHardwareStatusIndicators();
            
            // ÏãúÏä§ÌÖú Î¶¨ÏÜåÏä§ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            this.updateSystemResourceStatus(data);
        } catch (error) {
            console.error('ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', error);
        }
    }
    
    // ÏÉÅÌÉú Î∞∞ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
    updateStatusBadge(element, status, text) {
        if (!element) {
            console.warn('ÏÉÅÌÉú Î∞∞ÏßÄ ÏöîÏÜåÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§:', element);
            return;
        }
        
        element.className = `krds-badge krds-badge--${this.getStatusColor(status)}`;
        element.setAttribute('data-status', status);
        
        const statusTextElement = element.querySelector('.status-text');
        if (statusTextElement) {
            statusTextElement.textContent = text;
        } else {
            console.warn('ÏÉÅÌÉú ÌÖçÏä§Ìä∏ ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:', element);
        }
        
        const indicator = element.querySelector('.status-indicator');
        if (indicator) {
            indicator.className = `status-indicator ${status}`;
        }
    }
    
    // ÏÉÅÌÉúÏóê Îî∞Î•∏ ÏÉâÏÉÅ Î∞òÌôò
    getStatusColor(status) {
        const colorMap = {
            'connected': 'success',
            'uploaded': 'success',
            'active': 'warning',
            'completed': 'success',
            'error': 'danger',
            'disconnected': 'secondary',
            'waiting': 'secondary'
        };
        return colorMap[status] || 'secondary';
    }
    
    // ÌïòÎìúÏõ®Ïñ¥ ÏÉÅÌÉú ÌëúÏãúÍ∏∞ ÏóÖÎç∞Ïù¥Ìä∏
    updateHardwareStatusIndicators() {
        // ÏãúÎÆ¨Î†àÏù¥ÏÖòÎêú ÌïòÎìúÏõ®Ïñ¥ Ïó∞Í≤∞ ÏÉÅÌÉú
        const ports = [this.port1Status, this.port2Status, this.port3Status, this.port4Status];
        ports.forEach((port, index) => {
            if (port) {
                const isConnected = Math.random() > 0.3; // 70% ÌôïÎ•†Î°ú Ïó∞Í≤∞Îê®
                const status = isConnected ? 'connected' : 'disconnected';
                const text = isConnected ? 'Ïó∞Í≤∞Îê®' : 'ÎÅäÍπÄ';
                this.updateStatusBadge(port, status, text);
            } else {
                console.warn(`Ìè¨Ìä∏ ${index + 1} ÏÉÅÌÉú ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§`);
            }
        });
    }
    
    // ÏãúÏä§ÌÖú Î¶¨ÏÜåÏä§ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    updateSystemResourceStatus(data) {
        // CPU ÏÉÅÌÉú ÏãúÎÆ¨Î†àÏù¥ÏÖò
        if (this.cpuStatus) {
            const cpuUsage = Math.random() * 100;
            const cpuStatus = cpuUsage > 80 ? 'error' : cpuUsage > 60 ? 'warning' : 'success';
            this.updateStatusBadge(this.cpuStatus, cpuStatus, `${Math.round(cpuUsage)}%`);
        }
        
        // Î©îÎ™®Î¶¨ ÏÉÅÌÉú ÏãúÎÆ¨Î†àÏù¥ÏÖò
        if (this.memoryStatus) {
            const memoryUsage = Math.random() * 100;
            const memoryStatus = memoryUsage > 85 ? 'error' : memoryUsage > 70 ? 'warning' : 'success';
            this.updateStatusBadge(this.memoryStatus, memoryStatus, `${Math.round(memoryUsage)}%`);
        }
        
        // ÏÑ∏ÏÖò ÏÉÅÌÉú
        if (this.sessionStatus) {
            this.updateStatusBadge(this.sessionStatus, 'connected', 'ÌôúÏÑ±');
        }
        
        // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú
        if (this.networkStatus) {
            this.updateStatusBadge(this.networkStatus, 'connected', 'Ï†ïÏÉÅ');
        }
    }
    
    // ÌïòÎìúÏõ®Ïñ¥ Ïó∞Í≤∞ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    updateHardwareConnectionStatus(status) {
        console.log(`üîß ÌïòÎìúÏõ®Ïñ¥ Ïó∞Í≤∞ ÏÉÅÌÉú: ${status}`);
        // ÌïòÎìúÏõ®Ïñ¥ Í¥ÄÎ†® UI ÏóÖÎç∞Ïù¥Ìä∏ Î°úÏßÅ Ï∂îÍ∞Ä
    }
    
    // ÏÑ∏ÏÖò ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    updateSessionStatus(status) {
        console.log(`üì± ÏÑ∏ÏÖò ÏÉÅÌÉú: ${status}`);
        // ÏÑ∏ÏÖò Í¥ÄÎ†® UI ÏóÖÎç∞Ïù¥Ìä∏ Î°úÏßÅ Ï∂îÍ∞Ä
    }

    // ÏÑ∏ÏÖò ID ÏÉùÏÑ±
    generateSessionId() {
        return 'desktop_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }
    
    // ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ®
    async refreshSystemStatus() {
        console.log('üîÑ ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ®');
        try {
            location.reload(true);
            // SSEÎ•º ÌÜµÌï¥ Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÏÉÅÌÉúÎ•º Î∞õÍ≥† ÏûàÏúºÎØÄÎ°ú Î≥ÑÎèÑ Ìè¥ÎßÅ Î∂àÌïÑÏöî
            console.log('‚úÖ SSEÎ•º ÌÜµÌïú Ïã§ÏãúÍ∞Ñ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë');
        } catch (error) {
            console.error('‚ùå ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ® Ïã§Ìå®:', error);
        }
    }
    
    // ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî
    async resetSystem() {
        if (!confirm('ÏãúÏä§ÌÖúÏùÑ Ï¥àÍ∏∞ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
            return;
        }
        
        console.log('üîÑ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÏãúÏûë');
        try {
            const resetUrl = window.CONFIG?.ENDPOINTS?.DESKTOP?.RESET || '/desktop/api/reset';
            const response = await fetch(resetUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
                this.resetUI();
            } else {
                console.error('‚ùå ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', result.error);
                alert('ÏãúÏä§ÌÖú Ï¥àÍ∏∞ÌôîÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ' + result.error);
            }
        } catch (error) {
            console.error('ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî Ïò§Î•ò:', error);
            alert('ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    }
    
    // UI Ï¥àÍ∏∞Ìôî
    resetUI() {
        // AI ÏßÑÌñâÎ•† Ï¥àÍ∏∞Ìôî
        this.currentStep = 0;
        this.progressValue = 0;
        this.isProcessing = false;
        
        // AI Í¥ÄÎ†® UI Ï¥àÍ∏∞Ìôî (0%Î°ú Ï¥àÍ∏∞Ìôî)
        if (window.updateAIProgress) {
            window.updateAIProgress(this.currentStep, this.progressValue, 'waiting', 'ÏãúÏä§ÌÖú Ï§ÄÎπÑÎê®');
        }
        if (window.updateStepIndicator) {
            window.updateStepIndicator(this.currentStep);
        }
        
        // ÏÉÅÌÉú Î∞∞ÏßÄ Ï¥àÍ∏∞Ìôî
        if (this.imageUploadStatus) {
            this.updateStatusBadge(this.imageUploadStatus, 'waiting', 'ÎåÄÍ∏∞Ï§ë');
        }
        if (this.executionTriggerStatus) {
            this.updateStatusBadge(this.executionTriggerStatus, 'waiting', 'ÎåÄÍ∏∞Ï§ë');
        }
        if (this.mobileConnectionStatus) {
            this.updateStatusBadge(this.mobileConnectionStatus, 'disconnected', 'ÎåÄÍ∏∞Ï§ë');
        }
        
        // ÌïòÎìúÏõ®Ïñ¥ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
        this.hardwareConnected = false;
        
        console.log('‚úÖ UI Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    }
    
    // QR ÏΩîÎìú Î°úÎìú
    loadQRCode() {
        const qrImage = document.getElementById('qrCodeImage');
        if (qrImage) {
            // CONFIGÏóêÏÑú QR ÏΩîÎìú Í≤ΩÎ°ú Í∞ÄÏ†∏Ïò§Í∏∞
            const qrPath = window.CONFIG?.ENDPOINTS?.DESKTOP?.QR_PNG || '/desktop/qr.png';
            qrImage.src = qrPath;
            console.log('üì± QR ÏΩîÎìú Î°úÎìú:', qrPath);
            
            // Ïù¥ÎØ∏ÏßÄ Î°úÎìú ÏÑ±Í≥µ/Ïã§Ìå® Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
            qrImage.onload = () => {
                console.log('‚úÖ QR ÏΩîÎìú Î°úÎìú ÏÑ±Í≥µ');
            };
            
            qrImage.onerror = () => {
                console.error('‚ùå QR ÏΩîÎìú Î°úÎìú Ïã§Ìå®:', qrPath);
                // Í∏∞Î≥∏ Ïù¥ÎØ∏ÏßÄÎÇò ÎåÄÏ≤¥ ÌÖçÏä§Ìä∏ ÌëúÏãú
                qrImage.alt = 'QR ÏΩîÎìúÎ•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§';
                qrImage.style.display = 'none';
                const container = document.getElementById('qrCodeContainer');
                if (container && !container.querySelector('.qr-error')) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'qr-error';
                    errorDiv.textContent = 'QR ÏΩîÎìúÎ•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§';
                    errorDiv.style.cssText = 'text-align: center; color: #dc3545; padding: 20px;';
                    container.appendChild(errorDiv);
                }
            };
        }
    }
    
    // QR ÏΩîÎìú ÏÉàÎ°úÍ≥†Ïπ®
    refreshQRCode() {
        const qrImage = document.getElementById('qrCodeImage');
        if (qrImage) {
            // CONFIGÏóêÏÑú QR ÏΩîÎìú Í≤ΩÎ°ú Í∞ÄÏ†∏Ïò§Í∏∞
            const qrPath = window.CONFIG?.ENDPOINTS?.DESKTOP?.QR_PNG || '/desktop/qr.png';
            qrImage.src = qrPath + '?t=' + Date.now();
            console.log('üîÑ QR ÏΩîÎìú ÏÉàÎ°úÍ≥†Ïπ®:', qrPath);
        }
    }
    
    // ÌïòÎìúÏõ®Ïñ¥ Ï†úÏñ¥ Ïã§Ìñâ
    async triggerHardwareControl() {
        if (!this.isProcessing) {
            alert('Î®ºÏ†Ä AI Î∂ÑÏÑùÏùÑ ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }
        
        console.log('üîß ÌïòÎìúÏõ®Ïñ¥ Ï†úÏñ¥ Ïã§Ìñâ');
        try {
            const triggerHardwareUrl = window.CONFIG?.ENDPOINTS?.DESKTOP?.TRIGGER_HARDWARE || '/desktop/api/trigger_hardware';
            const response = await fetch(triggerHardwareUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    session_id: this.sessionId,
                    command: 'execute'
                })
            });
            
            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ ÌïòÎìúÏõ®Ïñ¥ Ï†úÏñ¥ ÏãúÏûë');
                this.updateStatusBadge(this.executionTriggerStatus, 'active', 'Ïã§ÌñâÏ§ë');
            } else {
                console.error('‚ùå ÌïòÎìúÏõ®Ïñ¥ Ï†úÏñ¥ Ïã§Ìå®:', result.error);
                alert('ÌïòÎìúÏõ®Ïñ¥ Ï†úÏñ¥Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ' + result.error);
            }
        } catch (error) {
            console.error('ÌïòÎìúÏõ®Ïñ¥ Ï†úÏñ¥ Ïò§Î•ò:', error);
            alert('ÌïòÎìúÏõ®Ïñ¥ Ï†úÏñ¥ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    }

}

// Ï†ÑÏó≠ Î≥ÄÏàòÎ°ú Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
let controlController;

// DOM Î°úÎìú ÏôÑÎ£å Ïãú Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', () => {
    controlController = new ControlController();
    
        // AI Î∂ÑÏÑù Ïä§Ìä∏Î¶ºÏùÄ control-ai.jsÏóêÏÑú Ï≤òÎ¶¨
    
    console.log('üéØ Îç∞Ïä§ÌÅ¨ÌÉë Í¥ÄÏ†ú ÌôîÎ©¥ Î°úÎî© ÏôÑÎ£å');
});

// ÌéòÏù¥ÏßÄ Ïñ∏Î°úÎìú Ïãú SSE Ïó∞Í≤∞ Ï†ïÎ¶¨
window.addEventListener('beforeunload', () => {
    if (controlController && controlController.eventSource) {
        try {
            controlController.eventSource.close();
            console.log('‚úÖ SSE Ïó∞Í≤∞ Ï†ïÎ¶¨ ÏôÑÎ£å');
        } catch (error) {
            console.warn('SSE Ïó∞Í≤∞ Ï†ïÎ¶¨ Ï§ë Ïò§Î•ò:', error);
        }
    }
});

// ÌéòÏù¥ÏßÄ Ïà®ÍπÄ Ïãú SSE Ïó∞Í≤∞ Ï†ïÎ¶¨ (Î™®Î∞îÏùº Î∏åÎùºÏö∞Ï†Ä ÎåÄÏùë)
document.addEventListener('visibilitychange', () => {
    if (document.hidden && controlController && controlController.eventSource) {
        try {
            controlController.eventSource.close();
            console.log('‚úÖ ÌéòÏù¥ÏßÄ Ïà®ÍπÄÏúºÎ°ú Ïù∏Ìïú SSE Ïó∞Í≤∞ Ï†ïÎ¶¨');
        } catch (error) {
            console.warn('SSE Ïó∞Í≤∞ Ï†ïÎ¶¨ Ï§ë Ïò§Î•ò:', error);
        }
    }
});

// Ï†ÑÏó≠ Ìï®ÏàòÎì§ (HTMLÏóêÏÑú Ìò∏Ï∂ú)
window.triggerHardwareControl = () => {
    if (controlController) {
        controlController.triggerHardwareControl();
    }
};

// Ï†ÑÏó≠ Ïù∏Ïä§ÌÑ¥Ïä§ ÎÖ∏Ï∂ú
window.controlController = controlController;