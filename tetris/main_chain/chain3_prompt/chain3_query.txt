Start working. The instruction is as follows:
"""
"instruction": {[INSTRUCTION]}
"""
Follow these rules:
1. **Return the output formatting exactly as shown in the Examples, adding no unnecessary whitespace or extra newlines.**
2. Seats maps must be native JSON objects with outer braces — never strings. All keys/strings must use double quotes (" "). Do not stringify nested objects.
3. The output must be a single valid JSON object that parses with Python json.loads as-is. No trailing commas, no comments, no NaN/Infinity; braces and brackets must be matched.
4. Your seat control sequence must obey the following constraints:
- If "facing" changes from F to R or R to B or B to L or L to F, "degree" is 90
- If "facing" changes from F to L or L to B or B to R or R to F, "degree" is 270
- If "facing" changes from F to B or B to F or R to L or L to R, "degree" is 180
- **Within each seat's action sequence, follow this order: disk_rotate → fold → seat_rotate → move_on_rail → unfold.**
  (This is a rule for the order of operations, not a requirement to use every function.)
- task_sequence should list the minimal valid sequence (no redundant actions).
5. Before submitting the final output, verify:
- **keys(instruction.seats) == keys(task_sequence)**
- **Strictly maintain the correct count of all curly braces ({}).**

**Plan sequentially: after each action, update the working state; decide the next action from that updated state.** 
Follow the rules above. Think step by step.